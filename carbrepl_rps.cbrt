/****************************************************************
 * file carbrepl_rps.cbrt
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 * Description:
 *      This file is part of the Reflective Persistent System.
 *      It is almost its Carburetta grammar
 *      see https://carburetta.com/
 *
 * Author(s):
 *      Basile Starynkevitch, France   <basile@starynkevitch.net>
 *
 *      Â© Copyright 2025 The Reflective Persistent System Team
 *      team@refpersys.org & http://refpersys.org/
 *
 * License: GPLv3+ (file COPYING-GPLv3)
 *    This software is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version. NO WARRANTY
 ****************************************************************/

#include "refpersys.hh"
#pragma message "prologue part of carbrepl_rps.cbrt"

#ifndef RPS_GITID
#error RPS_GITID is not defined by compilation command
#endif


%header%
#pragma message "header part of carbrepl_rps.cbrt"
extern "C" const char rps_carbrepl_gitid[];
extern "C" const char rps_carbrepl_date[];
extern "C" const char rps_carbrepl_shortgitid[];


%%

%prefix rpscarbrepl_
%token INT
%token DOUBLE
%token STRING
%token NAME
%token OID
%end_token EOF
%token KEYW_SHOW

//

%grammar%
%nt repl_input repl_command
%nt repl_atom repl_object
%type repl_object: Rps_ObjectRef
%type repl_atom: Rps_Value
%type repl_input: int
%type repl_command: int
%type INT: intptr_t
%type DOUBLE: double
%type STRING: std::string
%type NAME: std::string
%type OID: Rps_Id
%params Rps_TokenSource* tksrc, Rps_CallFrame* callframe
%constructor /* constructor */ $$ = nullptr; _Pragma("message carbrepl_rps constructor");
%destructor /* destructing common */ $$ = nullptr; _Pragma("message carbrepl_rps destructor");

/* the start symbol is the first non-terminal */
repl_input: EOF {
  _Pragma("message repl_input as EOF in carbrepl_rps.cbrt");
  $$ = 0;
}

repl_input: repl_command repl_input {
   _Pragma("message repl_input as repl_command repl_input  in carbrepl_rps.cbrt");
   $$ = $1 + 1;
}

repl_command: KEYW_SHOW repl_atom {
   _Pragma("message repl_command as KEYW_SHOW repl_atom in carbrepl_rps.cbrt");
   $$ = 1;
}

repl_command: error {
  RPS_WARNOUT("invalid syntax for command");
}

repl_atom: INT {
_Pragma("message repl_atom as INT in carbrepl_rps.cbrt");
  $$ = Rps_Value::make_tagged_int($0);
}

repl_atom: DOUBLE {
_Pragma("message repl_atom as DOUBLE in carbrepl_rps.cbrt");
  $$ = Rps_DoubleValue($0);
}

repl_atom: STRING {
_Pragma("message repl_atom as STRING in carbrepl_rps.cbrt");
  $$ = Rps_StringValue($0);
}

repl_atom: repl_object {
  _Pragma("message repl_atom as repl_object in carbrepl_rps.cbrt");
  $$ = $0;
}

repl_object: NAME {
  _Pragma("message repl_object as NAME in carbrepl_rps.cbrt");
  $$ = Rps_PayloadSymbol::find_named_object($0);
}

repl_object: OID {
  _Pragma("message repl_object as OID in carbrepl_rps.cbrt");
  $$ = Rps_ObjectRef::really_find_object_by_oid($0);
}
%%

#pragma message "trailer of carbrepl_rps.cbrt"


extern "C" const char rps_carbrepl_gitid[];
const char rps_carbrepl_gitid[]= RPS_GITID;

extern "C" const char rps_carbrepl_date[];
const char rps_carbrepl_date[]= __DATE__;

extern "C" const char rps_carbrepl_shortgitid[];
const char rps_carbrepl_shortgitid[]= RPS_SHORTGITID;

/****************
 **                           for Emacs...
 ** Local Variables: ;;
 ** compile-command: "make _carbrepl_rps.o && make" ;;
 ** End: ;;
 ****************/
