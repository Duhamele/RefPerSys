/****************************************************************
 * file carbrepl_rps.cbrt
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 * Description:
 *      This file is part of the Reflective Persistent System.
 *      It is almost its Carburetta grammar
 *      see https://carburetta.com/
 *
 * Author(s):
 *      Basile Starynkevitch, France   <basile@starynkevitch.net>
 *
 *      © Copyright 2025 The Reflective Persistent System Team
 *      team@refpersys.org & http://refpersys.org/
 *
 * License: GPLv3+ (file COPYING-GPLv3)
 *    This software is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version. NO WARRANTY
 ****************************************************************/

#include "refpersys.hh"
#pragma message "prologue part of carbrepl_rps.cbrt"

#ifndef RPS_GITID
#error RPS_GITID is not defined by compilation command
#endif

#warning rps_do_parse_carburetta_command should be declared in refpersys.hh
extern "C" void rps_do_parse_carburetta_command(Rps_CallFrame*callframe, Rps_ObjectRef obenv,
                                        const std::string&cmd,    const char*title=nullptr);
extern "C" void rps_carbrepl_do_display_command(Rps_CallFrame*callframe, Rps_ObjectRef obenv, Rps_Value expr);
static void rps_carbrepl_constructor_repl_object(Rps_ObjectRef&obr, int lin);
static void rps_carbrepl_destructor_repl_object(Rps_ObjectRef&obr, int lin);


static void rps_carbrepl_constructor_repl_atom(Rps_Value&val, int lin);
static void rps_carbrepl_destructor_repl_atom(Rps_Value&val, int lin);

static void rps_carbrepl_constructor_repl_expr(Rps_Value&val, int lin);
static void rps_carbrepl_destructor_repl_expr(Rps_Value&val, int lin);

extern "C" struct rpscarbrepl_stack;

/// The following is related to the the visitor facility in carburetta 0.8.25 or newer (april 2025)
/// See https://github.com/kingletbv/carburetta/issues/4
extern "C" void rps_carbrepl_garbage_collect_visit_stack(struct rpscarbrepl_stack*,Rps_GarbageCollector*);
%visit_params Rps_GarbageCollector*visitgc


%header%
#pragma message "header part of carbrepl_rps.cbrt"
extern "C" const char rps_carbrepl_gitid[];
extern "C" const char rps_carbrepl_date[];
extern "C" const char rps_carbrepl_shortgitid[];
%%

%prefix rpscarbrepl_
//forbidden %token_action here since it must follow %token_type, %type, %class, %common_type or %common_class directive
%end_token EOF

%token INT
%type INT: intptr_t
%token_action _Pragma("message \"token_action for INT\"");

%token DOUBLE
%type DOUBLE: double
%token_action _Pragma("message \"token_action for DOUBLE\"");

%token STRING
%type STRING: std::string
%token_action _Pragma("message \"token_action for STRING\"");

%token NAME
%type NAME: std::string
%token_action _Pragma("message \"token_action for NAME\"");

%token OID
%type OID: Rps_Id
%token_action _Pragma("message \"token_action for OID\"");

%token KEYW_DISPLAY
%token_action _Pragma("message \"token_action for KEYW_DISPLAY\"");

%token KEYW_OBJECT
%token_action _Pragma("message \"token_action for KEYW_OBJECT\"");

//

%grammar%
%params Rps_TokenSource* tksrc, Rps_CallFrame* callframe
%nt repl_input repl_command
%nt repl_atom repl_object repl_expr



// When the parser (not the scanner) needs a new input terminal symbol, the specified action code snippet is executed.
// we probably need to use Rps_TokenSource::lookahead_token
%on_next_token {_Pragma("message \"on_next_token code should read a terminal symbol using Rps_TokenSource::lookahead_token\"");}

%type repl_object: Rps_ObjectRef
%constructor rps_carbrepl_constructor_repl_object($$,__LINE__);
%destructor rps_carbrepl_destructor_repl_object($$,__LINE__);
%visit {_Pragma("message \"visit code for repl_object\"");RPS_ASSERT(visitgc);$$->gc_mark(*visitgc);}

%type repl_atom: Rps_Value
%constructor rps_carbrepl_constructor_repl_atom($$,__LINE__);
%destructor rps_carbrepl_destructor_repl_atom($$,__LINE__);
%visit {_Pragma("message \"visit code for repl_atom\"");RPS_ASSERT(visitgc);$$.gc_mark(*visitgc);}


%type repl_expr: Rps_Value
%constructor rps_carbrepl_constructor_repl_expr($$,__LINE__);
%destructor rps_carbrepl_destructor_repl_expr($$,__LINE__);
%visit {_Pragma("message \"visit code for repl_expr\"");RPS_ASSERT(visitgc);$$.gc_mark(*visitgc);}


%type repl_input: int
%type repl_command: int


/* the start symbol is the first non-terminal */
repl_input: EOF {
  _Pragma("message \"repl_input as EOF in carbrepl_rps.cbrt\"");
  RPS_ASSERT("empty repl_input" && tksrc != nullptr);
  RPS_ASSERT(callframe != nullptr && callframe->is_good_call_frame());
  $$ = 0;
}

repl_input: repl_command repl_input {
   _Pragma("message \"repl_input as repl_command repl_input in carbrepl_rps.cbrt\"");
   RPS_ASSERT("command repl_input" && tksrc != nullptr);
   RPS_ASSERT(callframe != nullptr && callframe->is_good_call_frame());
   $$ = $1 + 1;
}

repl_command: KEYW_DISPLAY repl_expr {
   _Pragma("message \"repl_command as KEYW_DISPLAY repl_expr in carbrepl_rps.cbrt\"");
   RPS_DEBUG_LOG(REPL, "show carburetta command:" << $1);
   RPS_ASSERT(callframe != nullptr && callframe->is_good_call_frame());
   rps_carbrepl_do_display_command(callframe, rps_get_first_repl_environment(), $1);
$$ = 1;
}

repl_command: error {
  RPS_WARNOUT("invalid syntax for command");
}

repl_atom: INT {
_Pragma("message \"repl_atom as INT in carbrepl_rps.cbrt\"");
  $$ = Rps_Value::make_tagged_int($0);
}

repl_atom: DOUBLE {
_Pragma("message \"repl_atom as DOUBLE in carbrepl_rps.cbrt\"");
  $$ = Rps_DoubleValue($0);
}

repl_atom: STRING {
_Pragma("message \"repl_atom as STRING in carbrepl_rps.cbrt\"");
  $$ = Rps_StringValue($0);
}

repl_atom: repl_object {
  _Pragma("message \"repl_atom as repl_object in carbrepl_rps.cbrt\"");
  $$ = Rps_ObjectValue($0);
}

repl_object: NAME {
  _Pragma("message \"repl_object as NAME in carbrepl_rps.cbrt\"");
  $$ = Rps_PayloadSymbol::find_named_object($0);
}

repl_object: OID {
  _Pragma("message \"repl_object as OID in carbrepl_rps.cbrt\"");
  $$ = Rps_ObjectRef::really_find_object_by_oid($0);
}

repl_expr: repl_atom {
  _Pragma("message \"repl_expr as repl_atom in carbrepl_rps.cbrt\"");
  $$ = $0;
}

repl_expr: KEYW_OBJECT repl_object {
  _Pragma("message \"repl_expr as KEYW_OBJECT repl_object in carbrepl_rps.cbrt\"");
  $$ = Rps_ObjectValue($1);
}

%%

#pragma message "trailer of carbrepl_rps.cbrt"

//// for objects in REPL
void
rps_carbrepl_constructor_repl_object(Rps_ObjectRef&obr, int lin)
{
  RPS_ASSERT(lin>0);
  RPS_POSSIBLE_BREAKPOINT();
  _Pragma("message \"rps_carbrepl_constructor_repl_object\"");
  obr = nullptr;
} // end rps_carbrepl_constructor_repl_object

void
rps_carbrepl_destructor_repl_object(Rps_ObjectRef&obr, int lin)
{
  RPS_ASSERT(lin>0);
  RPS_POSSIBLE_BREAKPOINT();
  _Pragma("message \"rps_carbrepl_repl_object_destructor\"");
  obr = nullptr;
} // end rps_carbrepl_repl_object_destructor



//// for atoms in REPL
void
rps_carbrepl_constructor_repl_atom(Rps_Value&val, int lin)
{
  RPS_ASSERT(lin>0);
  RPS_POSSIBLE_BREAKPOINT();
  val = nullptr;
  _Pragma("message \"rps_carbrepl_constructor_repl_atom\"");
} // end rps_carbrepl_constructor_repl_atom

void
rps_carbrepl_destructor_repl_atom(Rps_Value&val, int lin)
{
  RPS_ASSERT(lin>0);
  RPS_POSSIBLE_BREAKPOINT();
  val = nullptr;
  _Pragma("message \"rps_carbrepl_destructor_repl_atom\"");
} // end rps_carbrepl_repl_object_destructor_repl_atom



//// for expressions in REPL
void
rps_carbrepl_constructor_repl_expr(Rps_Value&val, int lin)
{
  RPS_ASSERT(lin>0);
  RPS_POSSIBLE_BREAKPOINT();
  val = nullptr;
  _Pragma("message \"rps_carbrepl_constructor_repl_expr\"");
} // end rps_carbrepl_constructor_repl_expr

void
rps_carbrepl_destructor_repl_expr(Rps_Value&val, int lin)
{
  RPS_ASSERT(lin>0);
  RPS_POSSIBLE_BREAKPOINT();
  val = nullptr;
  _Pragma("message \"rps_carbrepl_destructor_repl_expr\"");
} // end rps_carbrepl_repl_object_destructor_repl_expr


void
rps_do_parse_carburetta_command(Rps_CallFrame*callerframe, Rps_ObjectRef obenvarg,
                                const std::string&cmd,
                                const char*title)
{
  RPS_LOCALFRAME(/*descr:*/RPS_ROOT_OB(_4CZZ2JlnkQT02YJ6sM), //repl_command∈symbol
                 callerframe,
                 Rps_ObjectRef obenv;
                );
  _Pragma("message \"rps_do_parse_carburetta_command\"");
  _f.obenv = obenvarg;
  struct rpscarbrepl_stack carbstack;
  memset ((void*)&carbstack, 0, sizeof(carbstack));
  rpscarbrepl_stack_init(&carbstack);
  _.set_additional_gc_marker([&](Rps_GarbageCollector*gc) {
    RPS_ASSERT(gc != nullptr);
    rpscarbrepl_stack_visit(&carbstack, gc);
    });
  RPS_ASSERT(callerframe && callerframe->is_good_call_frame());
  RPS_POSSIBLE_BREAKPOINT();
  RPS_DEBUG_LOG(CMD, "carburetta command \"" << Rps_QuotedC_String(cmd)
                << "\" in environment " << RPS_OBJECT_DISPLAY(_f.obenv)
                << std::endl
                << RPS_FULL_BACKTRACE_HERE(1, "carburetta command start"));
#warning incomplete rps_do_parse_carburetta_command
  /// TODO: should probably use generated scanning routines
  /// the last statement should be the following cleanup
  rpscarbrepl_stack_cleanup(&carbstack);
  RPS_POSSIBLE_BREAKPOINT();
}  // end rps_do_parse_carburetta_command



 void
 rps_carbrepl_do_display_command(Rps_CallFrame*callerframe, Rps_ObjectRef obenvarg, Rps_Value exprarg)
 {
   RPS_LOCALFRAME(RPS_ROOT_OBJECT(_006mAbXTG4G00QR5HS), ///display∈symbol h:2127571271
		  callerframe,
		  Rps_ObjRef obenv;
		  Rps_Value exprv;
		 );
   _f.obenv = obenvarg;
   _f.exprv = exprarg;
  RPS_ASSERT(callerframe && callerframe->is_good_call_frame());
  RPS_POSSIBLE_BREAKPOINT();
  RPS_DEBUG_LOG(CMD, "carburetta display obenv=" << RPS_OBJECT_DISPLAY(_f.obenv) << std::endl
		<< "display expr=" << _f.exprv
                << std::endl
                << RPS_FULL_BACKTRACE_HERE(1, "carburetta command display"));
  RPS_POSSIBLE_BREAKPOINT();
#warning incomplete rps_do_display_carburetta_command	
 } // end rps_carbrepl_do_display_command


////////////////////////////////////////////////////////////////
extern "C" const char rps_carbrepl_gitid[];
const char rps_carbrepl_gitid[]= RPS_GITID;

extern "C" const char rps_carbrepl_date[];
const char rps_carbrepl_date[]= __DATE__;

extern "C" const char rps_carbrepl_shortgitid[];
const char rps_carbrepl_shortgitid[]= RPS_SHORTGITID;

extern "C" const size_t rpscarbrepl_stack_size;
extern "C" const size_t rpscarbrepl_stack_align;

const size_t rpscarbrepl_stack_size = sizeof(struct rpscarbrepl_stack);
const size_t rpscarbrepl_stack_align = alignof(struct rpscarbrepl_stack);
/****************
 **                           for Emacs...
 ** Local Variables: ;;
 ** compile-command: "make _carbrepl_rps.o && make" ;;
 ** End: ;;
 ****************/
