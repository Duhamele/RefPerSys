// ***************************************************************
// file rps_gramrepl.yy.gpp
// SPDX-License-Identifier: GPL-3.0-or-later
//
// Description: GPP input generating the GNU bison file
// 
// 
// 
//  Author(s):
//       Basile Starynkevitch <basile@starynkevitch.net>
//       Abhishek Chakravarti <abhishek@taranjali.org>
//       Nimesh Neema <nimeshneema@gmail.com>
// 
//       Â© Copyright 2019 - 2023 The Reflective Persistent System Team
//       team@refpersys.org & http://refpersys.org/
// 
//  You can consider RefPerSys as either GPLv3+ or LGPLv3+ licensed (at
//  your choice)
// 
//  License: GPLv3+ (file COPYING-GPLv3)
//     This software is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
// 
//  Alternative license: LGPLv3+ (file COPYING-LGPLv3)
//     This software is is free software: you can
//     redistribute it and/or modify it under the terms of the GNU
//     Lesser General Public License as published by the Free Software
//     Foundation, either version 3 of the License, or (at your option)
//     any later version.
// 
//     This program is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details or the Lesser
//     General Public License.
// 
//     You should have received a copy of the GNU General Public License
//     along with this program.  If not, see <http://www.gnu.org/licenses/>.
// *****************************************************************************/

/// Gpp input @&RPS_GPP_INPUT&@
/// Gpp output @&RPS_GPP_OUTPUT&@ done at @&date(%c %Z) on host @&RPS_HOST&@
/// git @&RPS_SHORTGIT&@ arch @&RPS_ARCH&@ opersys @&RPS_OPERSYS&@
/// 
////////////////////////////
%{
/** prologue of generated  @&RPS_GPP_OUTPUT&@
   done at @&date(%c %Z) on host @&RPS_HOST&@ */
#include "refpersys.hh"

#define RPSGRAM_DEBUG 1
/** end prologue of generated @&RPS_GPP_OUTPUT&@ from  @&RPS_GPP_INPUT&@ */
%}


//// the Bison declarations
%require "3.8"
%language "C++"
%define api.pure full
%header
%define api.prefix {rpsgram_}
%define api.value.type {Rps_Value}
%define api.symbol.prefix {RPSGRAMSYMB_}
%lex-param {Rps_CallFrame*callerframe, Rps_TokenSource*toksource, Rps_Value extralexv}
%parse-param {Rps_CallFrame*callerframe, Rps_TokenSource*toksource, Rps_Value extraparsv}
%start repl_input;
%type<void> repl_input;
%type<void> repl_command;
%%
/* the lexical terminals */
%token INTEGER FLOAT STRING OBJID NAME CODE_CHUNK;

/* the keywords */
%token KW_SHOW;


//// '(' and ')' parenthesis
%token LEFT_PAREN RIGHT_PAREN;

///  '{' and '}' brace
%token LEFT_BRACE RIGHT_BRACE;

/// '[' and ']' square bracket
%token LEFT_SQBRA RIGHT_SQBRA;

%token END_OF_INPUT;

repl_input: %empty {
      /* action for empty repl_input */
#warning action for empty repl_input
    }
    | repl_command repl_input {
      /* action for nonempty repl_input */
#warning action for nonempty repl_input
    }
    ;

repl_command: KW_SHOW repl_expr;

repl_expr: INTEGER
    | STRING
    | FLOAT
    | OBJID
    | NAME
    ;

%%
/// the epilogue


/// end of generated file  @&RPS_GPP_OUTPUT&@ from input @&RPS_GPP_INPUT&@
